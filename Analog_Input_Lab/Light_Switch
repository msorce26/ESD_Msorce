//Milestone 2 - Embedded Systems
//Michael Maloney and Michael Sorce
//Last Updated - 12/2/18

//Includes MSP430F5529 Header File
#include <msp430.h> 
//includes c standard library (for math function abs())
#include "stdlib.h"

int adchold = 0;

//Main function
int main(void)
{
    //stop watchdog timer
    WDTCTL = WDTPW | WDTHOLD;

    //Pin set up for outputs
        P1DIR |= BIT3;                             //P1.3 set to output
        P1SEL |= BIT3;                             //P1.3 select sent to 1, enabling hardware PWM

        WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
        ADC12CTL0 = ADC12SHT02 + ADC12ON;         // Sampling time, ADC12 on
        ADC12CTL1 = ADC12SHP;                     // Use sampling timer
        ADC12IE = BIT0;                           // Enable interrupt
        __delay_cycles(100);                       // delay to allow Ref to settle
        ADC12CTL0 |= ADC12ENC;
        P6SEL |= BIT0;                            // P6.0 ADC option select


    //PWM Timer Initialization
        TA0CCR0 = 1000;                           // Max number the timer will count to (makes it run at 1kHz)
        TA0CCTL2 = OUTMOD_7;                      //PWM mode 7 reset/set
        TA0CCR2 = 0;                              //Initial duty cycle set to 50% on/off (1000/500)
        TA0CTL = TASSEL_2 + MC_1 + TACLR;         //timer set up: SMCLK, up mode, clear TAR


        //Infinite loop
        while (1)
        {
            ADC12CTL0 &= ~ADC12SC;
            ADC12CTL0 |= ADC12SC;                   // Sampling and conversion start

            __bis_SR_register(LPM4_bits + GIE);     // LPM0 with interrupts enabled
            __no_operation();
        }
}

#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=ADC12_VECTOR
__interrupt void ADC12ISR (void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(ADC12_VECTOR))) ADC12ISR (void)
#else
#error Compiler not supported!
#endif
{
  switch(__even_in_range(ADC12IV,34))
  {
  case  0: break;                           // Vector  0:  No interrupt
  case  2: break;                           // Vector  2:  ADC overflow
  case  4: break;                           // Vector  4:  ADC timing overflow
  case  6:                                  // Vector  6:  ADC12IFG0
    adchold = ADC12MEM0;                // Move results, IFG is cleared
    if(adchold > 2000)
    {
        TA0CCR2 = 1000;
    }
    else
    {
        TA0CCR2 = 0;
    }
    /*if(deltaTemp > 0)                       //If PTAT is too hot
    {
        if(TA0CCR2 + 1 < 1000)              //If fan pwm is at least 1 below max
            TA0CCR2 = TA0CCR2 + 1;              //Increase fan speed PWM
    }
    else if (deltaTemp <= 0)                //If PTAT is too cold
    {
        if(TA0CCR2 - 1 > 10)                //if fan pwm is at least 1 above 0
            TA0CCR2 = TA0CCR2 - 1;              //Decrease fan speed PWM
    }*/
    __bic_SR_register_on_exit(LPM4_bits);   // Exit active CPU
    break;
  case  8: break;                           // Vector  8:  ADC12IFG1
  case 10: break;                           // Vector 10:  ADC12IFG2
  case 12: break;                           // Vector 12:  ADC12IFG3
  case 14: break;                           // Vector 14:  ADC12IFG4
  case 16: break;                           // Vector 16:  ADC12IFG5
  case 18: break;                           // Vector 18:  ADC12IFG6
  case 20: break;                           // Vector 20:  ADC12IFG7
  case 22: break;                           // Vector 22:  ADC12IFG8
  case 24: break;                           // Vector 24:  ADC12IFG9
  case 26: break;                           // Vector 26:  ADC12IFG10
  case 28: break;                           // Vector 28:  ADC12IFG11
  case 30: break;                           // Vector 30:  ADC12IFG12
  case 32: break;                           // Vector 32:  ADC12IFG13
  case 34: break;                           // Vector 34:  ADC12IFG14
  default: break;
  }
}
