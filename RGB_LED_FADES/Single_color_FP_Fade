//Michael Sorce
//Professor Muhlbaier
//Embedded Softwear Design
//Last Updated: 2/16/19

//includes msp430 header file
#include <msp430.h>
//includes math header file to use expf() function
#include <math.h>

//variable to control step size of CCR Values (used to fade colors)
//const int inc = 10;
const float inc = 0.0691;
float duty = 0;
float x = 0;

int dir = 0;

int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;             // Stop Watchdog timer
  P1DIR |= 0x1C;                        //P1.2, P1.3, P1.4 set to output
  P1SEL |= 0x1C;                        //P1.2, P1.3, P1.4 set to CCR outputs (CCR1, 2, and 3 respectively)

//sets CCTL1-3 to PWM mode 7 reset/set (set up for timerA0 hardware PWM)
  TA0CCTL1 = OUTMOD_7;
  TA0CCTL2 = OUTMOD_7;
  TA0CCTL3 = OUTMOD_7;

//Setup for TA0CCR1-3 (controls pwm for each color)
  TA0CCR0 = 1000;// Max number the timer will count to (makes it run at 1kHz)
  TA0CCR1 = 1000;// red
  TA0CCR2 = 0;// green
  TA0CCR3 = 0;// blue

  TA0CTL = TASSEL_2 + MC_1 + TACLR;//timer set up: SMCLK, up mode, clear TAR


//Timer A1 set up
  TA1CCR0 = 25000; //initialize capture compare register 0
  TA1CCTL0 = CCIE; //enable TimerA1 capture compare interrupt

  TA1CTL = TASSEL_2 + MC_3; //Starts Timer A1: uses SM clock (1MHz), in upmode, with /2 divider

  __bis_SR_register(LPM0_bits + GIE);// Enter LPM0 and enable general interrupt
  __no_operation();// For debugger
}

//timer interrupt service
#pragma vector=TIMER1_A0_VECTOR
__interrupt void Timer1_A0 (void)
{
//FADE CONTROL
    if(dir == 0)
    {
        x = x + inc;
        duty = expf(x);
        TA0CCR3 = duty;
        if(TA0CCR3 > 998)
        {
            dir = 1;
        }
    }
    else if(dir == 1)
    {
        x = x - inc;
        duty = expf(x);
        TA0CCR3 = duty;
        if(TA0CCR3 == 0)
        {
            dir = 0;
        }
    }
    else
    {
        TA0CCR3 = 0;
        x = 0;
    }

}
