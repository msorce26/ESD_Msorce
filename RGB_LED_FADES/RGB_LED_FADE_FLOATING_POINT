//Michael Sorce
//Professor Muhlbaier
//Embedded Softwear Design
//Last Updated: 2/16/19

//includes msp430 header file
#include <msp430.h>
//includes math header file to use expf() function
#include <math.h>

//variable to control step size of CCR Values (used to fade colors)
const float inc = 0.06907755;
float duty = 0;//hold variable to set int to a float value

float r = 6.907755;//float for red
float g = 0;//float for green
float b = 0;//float for blue

int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;             // Stop Watchdog timer
  P1DIR |= 0x1C;                        //P1.2, P1.3, P1.4 set to output
  P1SEL |= 0x1C;                        //P1.2, P1.3, P1.4 set to CCR outputs (CCR1, 2, and 3 respectively)

//sets CCTL1-3 to PWM mode 7 reset/set (set up for timerA0 hardware PWM)
  TA0CCTL1 = OUTMOD_7;
  TA0CCTL2 = OUTMOD_7;
  TA0CCTL3 = OUTMOD_7;

//Setup for TA0CCR1-3 (controls pwm for each color)
  TA0CCR0 = 1000;// Max number the timer will count to (makes it run at 1kHz)
  TA0CCR1 = 1000;// red
  TA0CCR2 = 0;// green
  TA0CCR3 = 0;// blue

  TA0CTL = TASSEL_2 + MC_1 + TACLR;//timer set up: SMCLK, up mode, clear TAR


//Timer A1 set up
  TA1CCR0 = 25000; //initialize capture compare register 0
  TA1CCTL0 = CCIE; //enable TimerA1 capture compare interrupt

  TA1CTL = TASSEL_2 + MC_3; //Starts Timer A1: uses SM clock (1MHz), in upmode

  __bis_SR_register(LPM0_bits + GIE);// Enter LPM0 and enable general interrupt
  __no_operation();// For debugger
}

//timer interrupt service
#pragma vector=TIMER1_A0_VECTOR
__interrupt void Timer1_A0 (void)
{
    // fade red to yellow
    //if red = max and green != max and blue = 0 increment green
    if(TA0CCR1 == 1000 && TA0CCR2 < 999 && TA0CCR3 == 0)//red to yellow
    {
        //inc green
        g = g + inc;
        duty = expf(g);
        TA0CCR2 = duty;
        if(TA0CCR2 == 999)
        {
            TA0CCR2 = 1000;
        }
    }
    // fade from yellow to green
    //else if red and green = max and blue = 0 decrement red
    else if(TA0CCR1 > 0 && TA0CCR2 == 1000 && TA0CCR3 == 0)//yellow to green
    {
        r = r - inc;
        duty = expf(r);
        TA0CCR1 = duty;
    }
    // fade from green to teal
    //else if red = 0 and green = max increment blue
    else if(TA0CCR1 == 0 && TA0CCR2 == 1000 && TA0CCR3 < 999)
    {
        b = b + inc;
        duty = expf(b);
        TA0CCR3 = duty;//inc blue
        if(TA0CCR3 == 999)
        {
            TA0CCR3 = 1000;
        }
    }
    // fade from teal to blue
    //else if green and blue = max decrement green
    else if(TA0CCR2 > 0 && TA0CCR3 == 1000 && TA0CCR1 == 0)
    {
        g = g - inc;
        duty = expf(g);
        TA0CCR2 = duty;//dec green
    }
    // fade from blue to purple
    //else if green = 0 and blue = max increment red
    else if(TA0CCR2 == 0 && TA0CCR3 == 1000 && TA0CCR1 < 999)
    {
        r = r + inc;
        duty = expf(r);
        TA0CCR1 = duty;//inc red
        if(TA0CCR1 == 999)
        {
            TA0CCR1 = 1000;
        }
    }

    // fade from purple to white
    //else if blue = max and red = max increment green
    else if(TA0CCR1 == 1000 && TA0CCR3 == 1000 && TA0CCR2 < 1000)
    {
        g = g + inc;
        duty = expf(g);
        TA0CCR2 = duty;//inc green
    }

    // fade from white to red
    //else if red = max decrement blue and green
    else if(TA0CCR1 == 1000 && TA0CCR2 > 0 && TA0CCR3 > 0)
    {
        g = g - inc;
        duty = expf(g);
        TA0CCR2 = duty;

        b = b - inc;
        duty = expf(b);
        TA0CCR3 = duty;

    }
    // fade from anything not matching the above pattern to red
    //else if green > blue decrement green
    else if(TA0CCR2 > TA0CCR3)
    {
        g = g - inc;
        duty = expf(g);
        TA0CCR2 = duty;
    }

    //else
    //if red < max then increment red
    //if blue != 0 then decrement blue
    //if green != 0 then decrement green
    else
    {
        if(TA0CCR1 < 1000)
        {
            r = r + inc;
            duty = expf(r);
            TA0CCR1 = duty;//inc red
            if(TA0CCR1 == 999)
            {
                TA0CCR1 = 1000;
            }
        }
        if(TA0CCR2 != 0)
        {
            g = g - inc;
            duty = expf(g);
            TA0CCR2 = duty;
        }
        if(TA0CCR3 != 0)
        {
            b = b - inc;
            duty = expf(b);
            TA0CCR3 = duty;
        }
    }

}
